"""
Django settings for Project project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@1giz2bj4c%*h+tjb0nz#u=esro)ca7)7#v*-uku87!*w_5j(9'


ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'news.apps.NewsConfig',

    'accounts',
    'sign',
    'profile',


    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'django_apscheduler',

]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

    'middleware.mobileChoiceMiddleware.MobileOrFullMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Настройки docker контейнера в файле docker-compose.yml, PostgresSQL БД развернута локально в контейнере. для ДЗ закоментирую и подключу SQlite обратно.
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'HOST': 'localhost',
#         'PORT': 5432,
#         'USER': str(os.getenv('DATA_USER')),
#         'PASSWORD': str(os.getenv('DATA_PASSWORD')),
#         'NAME': 'db-NewsPaper'

#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / "static"]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/profile/'
LOGOUT_REDIRECT_URL = '/sign/logout'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_FORMS = {'signup': 'sign.forms.BasicSignupForm'}

# настройки allauth
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/profile/'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# мои настройки из .env
EMAIL_HOST = str(os.getenv('EMAIL_HOST'))
EMAIL_PORT = str(os.getenv('EMAIL_PORT'))
EMAIL_HOST_USER = str(os.getenv('EMAIL_HOST_USER'))
EMAIL_HOST_PASSWORD = str(os.getenv('EMAIL_HOST_PASSWORD'))
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = str(os.getenv('DEFAULT_FROM_EMAIL'))
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_ADMIN = DEFAULT_FROM_EMAIL
# тестовое мыло
MY_TEST_EMAIL = str(os.getenv('MY_TEST_EMAIL'))

# Для просмотра HTML-шаблонов, которые отправляются на мыло, в консоли
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

ADMINS = [
    ("admin", MY_TEST_EMAIL)
]

# формат даты, которую будет воспринимать наш задачник(вспоминаем урок по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

# кэширование
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# что-то слишком много дэбага в консоле

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{asctime} {levelname} {message}",
            "style": "{",
        },
        "detailed": {
            # Формат вывода для обработчика general_file
            "format": "{asctime} {levelname} {module} {message} {exc_info}",
            "style": "{",  # Стиль форматирования, используем фигурные скобки
        },
        "detailed_error_critical": {
            "format": "{name} {asctime} {levelname} {message} {pathname} {exc_info}",
            "style": "{",
        },
        "detail_on_mail": {
            "format": "{name} {asctime} {levelname} {message} {pathname}",
            "style": "{",
        }
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple" if "level" == "DEBUG" else "detailed_error_critical",
            # Используем встроенный фильтр RequireDebugTrue
            "filters": ["require_debug_true"],
            "level": "DEBUG",
        },
        "general_file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join("logs", "general.log"),
            "when": "midnight",
            "backupCount": 30,
            "formatter": "detailed",
            "level": "INFO",  # Уровень обработчика для файла general.log
            "filters": ["require_debug_false"],
        },
        "errors_file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join("logs", "errors.log"),
            "when": "midnight",
            "backupCount": 30,
            "formatter": "detailed_error_critical",
            "level": "ERROR",
        },
        "security_file": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join("logs", "security.log"),
            "when": "midnight",
            "backupCount": 30,
            "formatter": "detailed",
            "level": "INFO",  # Уровень обработчика для файла security.log
        },
        "mail_admins": {
            # "class": "logging.handlers.SMTPHandler",
            "class": "django.utils.log.AdminEmailHandler",
            "formatter": "detail_on_mail",
            "level": "ERROR",
            "filters": ["require_debug_false"],
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "general_file"],
            "level": "DEBUG",
            "propagate": False,
            'exc_info': True,
        },
        "django.request": {
            "handlers": ["console", "errors_file", "mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["console", "errors_file", "mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.template": {
            "handlers": ["console", "errors_file"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["console", "errors_file"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.security": {
            "handlers": ["console", "security_file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
